{"version":3,"sources":["../src/datasource.js"],"names":["defaultSettings","name","apiUrl","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","config","jsonData","apiToken","_","defaults","url","token","headers","options","targets","extractTargets","length","data","startAt","range","from","toISOString","stopAt","to","intervalMs","limit","maxDataPoints","filter","target","map","sampleId","type","datasourceRequest","method","then","result","status","message","title","annotation","enable","hide","tags","query","annotations","issue","index","firstSeen","Date","parse","lastSeen","isRegion","enabled","datasource","summary","time","timeEnd","text","description","params","serviceSampleType","_index","simpleName","toLowerCase","serviceType","value","id","Promise","resolve","reject","doRequest"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\n\n\nconst defaultSettings = {\n  name: \"vorstella-datasource\",\n  apiUrl: \"https://metrics.prod.noc.vorstella.com\"\n};\n\n\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const config = {\n      name: instanceSettings.name,\n      apiUrl: instanceSettings.jsonData.apiUrl,\n      apiToken: instanceSettings.jsonData.apiToken\n    };\n    _.defaults(config, defaultSettings);\n\n    this.url = config.apiUrl;\n    this.name = config.name;\n    this.token = config.apiToken;\n\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Authorization\": \"Token \" + this.token\n    };\n  }\n\n  query(options) {\n    const targets = this.extractTargets(options);\n\n    if (targets.length == 0) {\n      return [];\n    }\n\n    const data = {\n      startAt: options.range.from.toISOString(),\n      stopAt: options.range.to.toISOString(),\n      intervalMs: options.intervalMs,\n      limit: options.maxDataPoints,\n      targets: targets\n    };\n\n    return [];\n  }\n\n  extractTargets(options) {\n    //remove placeholder targets from query\n    options.targets = _.filter(options.targets, target => {\n      return target.target && target.target !== 'select metric';\n    });\n\n    return _.map(options.targets, target => {\n      return {\n        sampleId: target.target,\n        type: target.type || 'timeserie'\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + \"/api/v1/clusters\",\n      method: \"GET\",\n      headers: this.headers\n    }).then(result => {\n      if (result.status == 200) {\n        return {\n          status: \"success\",\n          message: \"Data source is working.\",\n          title: \"Success\"\n        };\n      } else {\n        return {\n          status: \"failed\",\n          message: \"Please check your credentials\",\n          title: \"Failed\"\n        };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    const data = {\n      startAt: options.range.from.toISOString(),\n      stopAt: options.range.to.toISOString(),\n      limit: options.annotation.limit,\n      enable: options.annotation.enable,\n      hide: options.annotation.hide,\n      type: options.annotation.type,\n      tags: options.annotation.tags,\n      query: options.annotation.query\n    }\n\n    const annotations = this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v1/grafana/annotations',\n      method: 'POST',\n      headers: this.headers,\n      data: data\n    }).then(result => {\n      return _.map(result.data.data, (issue, index) => {\n        const firstSeen = Date.parse(issue.firstSeen);\n        var lastSeen = null;\n        if (issue.lastSeen) {\n          lastSeen = Date.parse(issue.lastSeen);\n        }\n        const isRegion = lastSeen != null;\n\n        return {\n          annotation: {\n            name: options.annotation.name,\n            enabled: options.annotation.enable,\n            datasource: options.annotation.datasource\n          },\n          title: issue.summary,\n          time: firstSeen,\n          timeEnd: lastSeen,\n          isRegion: isRegion,\n          tags: [],\n          text: issue.description\n        }\n      })\n    });\n\n    return annotations;\n  }\n\n  metricFindQuery(query) {\n    const params = null;\n\n    if (query) {\n      params = {\n        target: query\n      };\n    }\n\n    // TODO: When we already made a query, hang on to the results for some time\n    //       5 minutes or so sounds like a good amount for a cache.\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v1/grafana/search',\n      params: params,\n      method: 'GET',\n      headers: this.headers\n    }).then(result => {\n      return _.map(result.data.data, (serviceSampleType, _index) => {\n        const text = serviceSampleType.simpleName.toLowerCase() + \" \" + serviceSampleType.serviceType;\n        const value = serviceSampleType.id;\n        return {\n          text: text,\n          value: value\n        }\n      });\n    });\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n}\n"],"file":"datasource.js"}