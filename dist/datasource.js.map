{"version":3,"sources":["../src/datasource.js"],"names":["defaultSettings","name","apiUrl","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","config","jsonData","apiToken","console","log","_","defaults","url","token","headers","options","datasourceRequest","method","then","result","data","status","message","title","query","Promise","resolve","reject","doRequest"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAGA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE,sBADgB;AAEtBC,EAAAA,MAAM,EAAE;AAFc,CAAxB;;IAMaC,iB;;;AACX,6BAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,QAAMC,MAAM,GAAG;AACbP,MAAAA,IAAI,EAAEG,gBAAgB,CAACH,IADV;AAEbC,MAAAA,MAAM,EAAEE,gBAAgB,CAACK,QAAjB,CAA0BP,MAFrB;AAGbQ,MAAAA,QAAQ,EAAEN,gBAAgB,CAACK,QAAjB,CAA0BC;AAHvB,KAAf;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,gBAAZ;;AACAS,oBAAEC,QAAF,CAAWN,MAAX,EAAmBR,eAAnB;;AAEA,SAAKe,GAAL,GAAWP,MAAM,CAACN,MAAlB;AACA,SAAKD,IAAL,GAAYO,MAAM,CAACP,IAAnB;AACA,SAAKe,KAAL,GAAaR,MAAM,CAACE,QAApB;AAEA,SAAKJ,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKU,OAAL,GAAe;AACb,sBAAgB,kBADH;AAEb,uBAAiB,WAAW,KAAKD;AAFpB,KAAf;AAID;;;;0BAEKE,O,EAAS;AACb,aAAO,KAAKZ,UAAL,CAAgBa,iBAAhB,CAAkC;AACvCJ,QAAAA,GAAG,EAAE,KAAKA,GAAL,GAAW,0BADuB;AAEvCK,QAAAA,MAAM,EAAE;AAF+B,OAAlC,EAGJC,IAHI,CAGC,UAAAC,MAAM,EAAI;AAAE,eAAOA,MAAM,CAACC,IAAd;AAAoB,OAHjC,CAAP;AAID;;;qCAEgB;AACf,aAAO,KAAKjB,UAAL,CAAgBa,iBAAhB,CAAkC;AACvCJ,QAAAA,GAAG,EAAE,KAAKA,GAAL,GAAW,kBADuB;AAEvCK,QAAAA,MAAM,EAAE,KAF+B;AAGvCH,QAAAA,OAAO,EAAE,KAAKA;AAHyB,OAAlC,EAIJI,IAJI,CAIC,UAAAC,MAAM,EAAI;AAChB,YAAIA,MAAM,CAACE,MAAP,IAAiB,GAArB,EAA0B;AACxB,iBAAO;AACLA,YAAAA,MAAM,EAAE,SADH;AAELC,YAAAA,OAAO,EAAE,yBAFJ;AAGLC,YAAAA,KAAK,EAAE;AAHF,WAAP;AAKD,SAND,MAMO;AACL,iBAAO;AACLF,YAAAA,MAAM,EAAE,QADH;AAELC,YAAAA,OAAO,EAAE,+BAFJ;AAGLC,YAAAA,KAAK,EAAE;AAHF,WAAP;AAKD;AACF,OAlBM,CAAP;AAmBD;;;oCAEeR,O,EAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,EAAP;AACD;;;oCAEeS,K,EAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,EAAP;AACD;;;+BAEUT,O,EAAS;AAAA;;AAClB,aAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAA,KAAI,CAACC,SAAL,CAAe;AACbhB,UAAAA,GAAG,EAAE,KAAI,CAACA,GAAL,GAAW,WADH;AAEbK,UAAAA,MAAM,EAAE,MAFK;AAGbG,UAAAA,IAAI,EAAEL;AAHO,SAAf,EAIGG,IAJH,CAIQ,UAAAC,MAAM,EAAI;AAChB,iBAAOO,OAAO,CAACP,MAAM,CAACC,IAAR,CAAd;AACD,SAND;AAOD,OARM,CAAP;AASD;;;iCAEYL,O,EAAS;AAAA;;AACpB,aAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAA,MAAI,CAACC,SAAL,CAAe;AACbhB,UAAAA,GAAG,EAAE,MAAI,CAACA,GAAL,GAAW,aADH;AAEbK,UAAAA,MAAM,EAAE,MAFK;AAGbG,UAAAA,IAAI,EAAEL;AAHO,SAAf,EAIGG,IAJH,CAIQ,UAAAC,MAAM,EAAI;AAChB,iBAAOO,OAAO,CAACP,MAAM,CAACC,IAAR,CAAd;AACD,SAND;AAOD,OARM,CAAP;AASD","sourcesContent":["import _ from \"lodash\";\n\n\nconst defaultSettings = {\n  name: \"vorstella-datasource\",\n  apiUrl: \"https://metrics.dev.noc.vorstella.com\"\n};\n\n\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const config = {\n      name: instanceSettings.name,\n      apiUrl: instanceSettings.jsonData.apiUrl,\n      apiToken: instanceSettings.jsonData.apiToken\n    };\n    console.log(instanceSettings);\n    _.defaults(config, defaultSettings);\n\n    this.url = config.apiUrl;\n    this.name = config.name;\n    this.token = config.apiToken;\n\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Token \" + this.token\n    };\n  }\n\n  query(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics/api/v1/clusters',\n      method: 'GET'\n    }).then(result => { return result.data })\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + \"/api/v1/clusters\",\n      method: \"GET\",\n      headers: this.headers\n    }).then(result => {\n      if (result.status == 200) {\n        return {\n          status: \"success\",\n          message: \"Data source is working.\",\n          title: \"Success\"\n        };\n      } else {\n        return {\n          status: \"failed\",\n          message: \"Please check your credentials\",\n          title: \"Failed\"\n        };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    // var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    // var annotationQuery = {\n    //   range: options.range,\n    //   annotation: {\n    //     name: options.annotation.name,\n    //     datasource: options.annotation.datasource,\n    //     enable: options.annotation.enable,\n    //     iconColor: options.annotation.iconColor,\n    //     query: query\n    //   },\n    //   rangeRaw: options.rangeRaw\n    // };\n    //\n    // return this.doRequest({\n    //   url: this.url + '/annotations',\n    //   method: 'get',\n    //   data: annotationQuery\n    // }).then(result => {\n    //   return result.data;\n    // });\n    return {};\n  }\n\n  metricFindQuery(query) {\n    // var interpolated = {\n    //     target: this.templateSrv.replace(query, null, 'regex')\n    // };\n    //\n    // return this.doRequest({\n    //   url: this.url + '/search',\n    //   data: interpolated,\n    //   method: 'POST',\n    // }).then(this.mapToTextValue);\n    return {};\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"],"file":"datasource.js"}